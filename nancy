#! /usr/bin/env lua
prog = {
  name = "nancy",
  banner = "nancy $Revision$ ($Date$)\n" ..
    "(c) 2002-2006 Reuben Thomas (rrt@sc3d.org; http://rrt.sc3d.org/)\n" ..
    "Distributed under the GNU General Public License",
  purpose = "The lazy person's web site maker",
  notes = "Usage: nancy ROOT TEMPLATE PAGE\n" ..
    "  ROOT is the root directory of the file tree\n" ..
    "  TEMPLATE is the template to use\n" ..
    "  PAGE is the path to the page to process"
}


require "std"


-- Command-line options
options = {
   Option {{"debug", "d"}, "print inclusion graph on stderr"},
}

-- Get arguments
getopt.processArgs ()
if table.getn (arg) == 0 then
  getopt.dieWithUsage ()
end

local root = arg[1] or die "No root given"
table.remove (arg, 1)
if posix.stat (root, "type") ~= "directory" then
  die ("Root `" .. root .. "' not found or not a directory")
end

local template = arg[1] or die "No template given"
table.remove (arg, 1)

local page = arg[1] or die "No page given"
page = root .. "/" .. page
table.remove (arg, 1)

if #arg > 0 then
  die "Too many arguments given"
end

-- Process macro calls in some text; if the macro is undefined, replace it, uppercased
function expand (macro, arg, caller)
  Macros = {
    include = function (template)
                local curdir = page
                repeat
                  local name = curdir .. "/" .. template
                  if io.exists (name) then
                    return io.open (name):read ("*a"), " " .. curdir
                  end
                  if curdir == "." then
                    die ("Can't find template `" .. template .. "'")
                  end
                  curdir = io.dirname (curdir)
                until nil
              end,
  }

  if Macros[macro] then
    local args = string.split ("(?<!\\\\),", arg or "")
    local callees = {}
    local text, note = Macros[macro] (unpack (args))
    note = note or ""
    local reps
    repeat
      text, reps = rex.gsub (text, "\\$([[:lower:]]+)(?:{((?:(?!(?<!\\\\)[{}]).)*)(?<!\\\\)})",
                                function (macro, arg)
                                  return expand (macro, arg, callees)
                                end)
    until reps == 0
    table.insert (caller, {"$" .. macro .. "\{" .. arg .. "}" .. note, callees})
    return text
  else
    macro = string.upper (string.sub (macro, 1, 1)) .. string.sub (macro, 2)
    return "$" .. macro .. "{" .. arg .. "}"
  end
end

-- Process macro calls in some text
function doMacro (macro, arg, caller)
  local text = expand (macro, arg, caller)
  -- Convert unknown macros "$Macro" back to "$macro"
  text = rex.gsub (text, "(?!<\\\\)\\$([[:upper:]])",
                   function (macro)
                     return string.lower (macro)
                   end)
  return text
end


-- Process file
local forest = {}
io.stdout:write (doMacro ("include", template, forest))
io.stdout:flush ()

if getopt.opt.debug then
  io.stderr:write (page .. "\n")
  io.stderr:write (prettytostring (forest))
end

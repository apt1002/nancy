#! /usr/bin/env lua
prog = {
  name = "nancy",
  banner = "nancy $Revision$ ($Date$)\n" ..
    "(c) 2002-2006 Reuben Thomas (rrt@sc3d.org; http://rrt.sc3d.org/)\n" ..
    "Distributed under the GNU General Public License",
  purpose = "The lazy person's web site maker",
  notes = "Usage: nancy DIRECTORY ROOT-FRAGMENT SEARCH-PATH\n" ..
    "  DIRECTORY is the directory under which the fragments are kept\n" ..
    "  ROOT-FRAGMENT is the root fragment to use\n" ..
    "  SEARCH-PATH is the search path to use"
}


require "std"


-- Command-line options
options = {
   Option {{"debug", "d"}, "print inclusion graph on stderr"},
}

-- Get arguments
getopt.processArgs ()
if table.getn (arg) == 0 then
  getopt.dieWithUsage ()
end

local directory = arg[1] or die "No directory given"
table.remove (arg, 1)
if posix.stat (directory, "type") ~= "directory" then
  die ("Directory `" .. directory .. "' not found or not a directory")
end

local fragment = arg[1] or die "No fragment given"
table.remove (arg, 1)

local searchPath = arg[1] or die "No search path given"
searchPath = directory .. "/" .. searchPath
table.remove (arg, 1)

if #arg > 0 then
  die "Too many arguments given"
end

-- Macros
Macros = {
  include = function (fragment)
              local curdir = searchPath
              repeat
                local name = curdir .. "/" .. fragment
                if io.exists (name) then
                  return io.open (name):read ("*a"), " " .. curdir
                end
                if curdir == "." then
                  die ("Can't find fragment `" .. fragment .. "'")
                end
                curdir = io.dirname (curdir)
              until nil
            end,
}

-- Call a macro, returning its result
function doMacro (macro, arg)
  if Macros[macro] then
    local text, note = Macros[macro] (arg)
    return expand (text)
  else
    return "$" .. macro .. "{" .. arg .. "}"
  end
end

-- Expand macros in some text
function expand (text)
  local caller = {}
  text = rex.gsub (text, "\\$([[:lower:]]+)(?:{((?:(?![{}]).)*)})",
                   function (macro, arg)
                     local ret, callees = doMacro (macro, arg)
                     table.insert (caller, {"$" .. macro .. "{" .. arg ..
                                     "}" .. (note or ""),
                                     callees})
                     return ret
                   end)
  return text, caller
end

-- Process file
local text, callees = doMacro ("include", fragment)
io.stdout:write (text)
io.stdout:flush ()

if getopt.opt.debug then
  io.stderr:write (searchPath .. "\n")
  io.stderr:write (prettytostring (callees))
end

#!/usr/bin/perl
my $version = <<'END';
nancy @Version@
(c) 2002-2016 Reuben Thomas <rrt@sc3d.org>
https://github.com/rrthomas/nancy/
Distributed under the GNU General Public License version 3, or (at
your option) any later version. There is no warranty.
END

use 5.10.0;
use strict;
use warnings;

use File::Spec::Functions qw(splitdir catfile);
use File::Basename;
use Getopt::Long;
use Cwd;

use File::Slurp qw(slurp);

use RRT::Macro;

# Process command line
my ($root, $verbose_flag, $version_flag, $help_flag);
my $prog = basename($0);
my $opts = GetOptions(
  "root=s" => \$root,
  "verbose" => \$verbose_flag,
  "version" => \$version_flag,
  "help" => \$help_flag,
 );
die $version if $version_flag;
die <<END if !$opts || $#ARGV != 1;
Usage: $prog [OPTION...] TEMPLATE PATH
The lazy weaver

  --root DIRECTORY  source root [default is current directory]
  --verbose         show files woven and included (on standard error)
  --version         show program version
  --help            show this help

  TEMPLATE is the template file
  PATH is the desired path to weave
END
my $template = $ARGV[0];
my $path = $ARGV[1];
my @path = splitdir($path);
$root ||= cwd();
if ($verbose_flag) {
  say STDERR "$path:";
}

# FIXME: Use a module to add the boilerplate to the messages
sub Die {
  die "$prog: $_[0]\n";
}

# Search for file starting at the given path; if found return its file
# name and contents; if not, die.
sub find_on_path {
  my ($path, $file, $root) = @_;
  my @file = (split "/", $file);
  my @search = @{$path};
  while ($file[0] eq "..") {
    shift @file;
    pop @search;
  }
  for (;; pop @search) {
    my $thissearch = [@search, @file];
    my $obj = catfile($root, @{$thissearch});
    if (-f $obj) {
      say STDERR "  $obj" . (-x $obj ? "*" : "") if $verbose_flag;
      return $obj;
    }
    last if $#search == -1;
  }
  Die("cannot find `$file' while building `" . catfile(@{$path}) . "'");
}

# Set up macros
my %macros = (
  path => sub { $path; },
  root => sub { $root; },
  template => sub { $template; },
  include => sub {
    my $leaf = shift;
    my $file = find_on_path(\@path, $leaf, $root);
    if (defined($file)) {
      my $reader;
      if (-x $file) {
        open($reader, "-|", $file, @_) or Die("error starting `$file'");
      } else {
        open($reader, $file) or Die("cannot open `$file'");
      }
      binmode($reader, ':raw');
      my $output = scalar(slurp($reader));
      close($reader) or Die("error reading `$file'");
      return $output;
    }
  }
);

# Weave path
print STDOUT expand("\$include{$template}", \%macros);

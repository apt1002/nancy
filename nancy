#! /usr/bin/env lua
prog = {
  name = "nancy",
  banner = "nancy $Revision$ ($Date$)\n" ..
    "(c) 2002-2006 Reuben Thomas (rrt@sc3d.org; http://rrt.sc3d.org/)\n" ..
    "Distributed under the GNU General Public License",
  purpose = "The lazy web site maker",
  notes = "Usage: nancy DIRECTORY ROOT-FRAGMENT SEARCH-PATH\n" ..
    "  DIRECTORY is the directory under which the fragments are kept\n" ..
    "  ROOT-FRAGMENT is the root fragment to use\n" ..
    "  SEARCH-PATH is the search path to use"
}


require "std"


-- Command-line options
options = {
  Option {{"list-fragments", "l"}, "list fragments included (on stderr)"},
}

-- Get arguments
getopt.processArgs ()
if table.getn (arg) ~= 3 then
  getopt.dieWithUsage ()
end

local directory = arg[1]
if posix.stat (directory, "type") ~= "directory" then
  die ("Directory `" .. directory .. "' not found or not a directory")
end
local fragment = arg[2]
local searchPath = directory .. "/" .. arg[3]

-- Find an included file
-- FIXME: Make an iterator over the path?
function include (fragment)
  local curdir = searchPath
  repeat
    local name = curdir .. "/" .. fragment
    if io.exists (name) then
      if getopt.opt["list-fragments"] then
        io.stderr:write (name .. "\n")
      end
      return io.open (name):read ("*a")
    end
    if curdir == "." then
      die ("Can't find fragment `" .. fragment .. "'")
    end
    curdir = io.dirname (curdir)
  until nil
end

-- Expand includes in some text
function expand (text)
  return (rex.gsub (text, "\\$include{([^{}]*)}",
                    function (filename)
                      return expand (include (filename))
                    end))
end

-- Process file
io.stdout:write (expand (include (fragment)))

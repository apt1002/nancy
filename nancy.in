#!/usr/bin/env perl
package main;

my $version = <<'END';
nancy @Version@
(c) 2002-2021 Reuben Thomas <rrt@sc3d.org>
https://github.com/rrthomas/nancy/
Distributed under the GNU General Public License version 3, or (at
your option) any later version. There is no warranty.
END

use 5.10.0;
use strict;
use warnings;

use File::Spec::Functions qw(splitdir catfile);
use File::Basename;
use Getopt::Long;
use Cwd;

use File::Slurp qw(slurp);
use File::Which;

use RRT::Macro 3.19;

# Process command line
my ($output_file, $root, $verbose_flag, $version_flag, $help_flag);
my $prog = basename($0);
my $opts = GetOptions(
  "output=s" => \$output_file,
  "root=s" => \$root,
  "verbose" => \$verbose_flag,
  "version" => \$version_flag,
  "help" => \$help_flag,
 );
if ($version_flag) {
  print STDERR $version;
  exit 0;
}
# FIXME: Allow syntax to be redefined (see FIXME in Macro.pm)
die <<END if !$opts || $#ARGV != 1;
Usage: $prog [OPTION...] TEMPLATE PATH
A simple macro processor.

  --output FILE     output file [default is standard output]
  --root DIRECTORY  source root [default is current directory]
  --verbose         show on standard error the path being built, and
                    the names of files built, included and pasted
  --version         show program version
  --help            show this help

  TEMPLATE is the template file name
  PATH is the desired path to build
  Use `-' as a file name to indicate standard input or output
END
my $template = $ARGV[0];
my $path = $ARGV[1];
my @path = splitdir($path);
$root ||= cwd();
say STDERR "$path:" if $verbose_flag;

# FIXME: Use a module to add the boilerplate to the messages
sub Die {
  die "$prog: $_[0]\n";
}

# Search for file starting at the given path; if found return its file
# name and contents; if not, die.
sub find_on_path {
  my ($path, $file, $root) = @_;
  my @file = splitdir($file);
  my @search = @{$path};
  for (;; pop @search) {
    my $thissearch = [@search, @file];
    my $obj = catfile($root, @{$thissearch});
    if (-f $obj) {
      say STDERR "  $obj" . (-x $obj ? "*" : "") if $verbose_flag;
      return $obj;
    }
    last if $#search == -1;
  }
}

# Get a file or program output to include or paste
our $file;
sub get_file {
  my $start_path = \@path;
  my $processor = shift;
  my $leaf = shift;
  $start_path = [splitdir(dirname(dirname($file =~ s|^$root/||r)))]
    if defined($file) && $leaf eq basename($file);
  my $reader;
  local $file;
  if ($leaf eq "-") {
    $reader = \*STDIN;
  } elsif ($file = find_on_path($start_path, $leaf, $root) || which($leaf)) {
    if (-x $file) {
      open($reader, "-|", $file, @_) or Die("error starting `$file'");
    } else {
      open($reader, $file) or Die("cannot open `$file'");
    }
  } else {
    Die("cannot find `$leaf' while building `$path'");
  }
  binmode($reader);
  chomp(my $output = scalar(slurp($reader)));
  close($reader) or Die("error reading `$file'");
  return &{$processor}($output);
}

# Set up macros
my %macros;
%macros = (
  path => sub { $path; },
  root => sub { $root; },
  template => sub { $template; },
  include => sub { get_file(sub { return expand($_[0], \%macros); }, @_); },
  paste => sub { get_file(sub { return $_[0]; }, @_); },
);

# Build path
my $fh = \*STDOUT;
open($fh, ">", $output_file) if defined($output_file) && $output_file ne "-";
print $fh expand("\$include{$template}", \%macros);

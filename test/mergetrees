#! /usr/bin/perl
my $version = <<'END';
mergetrees
(c) 2008, 2009 Reuben Thomas (rrt@sc3d.org; http://rrt.sc3d.org/)
Distributed under the GNU General Public License
END

use strict;
use warnings;

use Config;
use File::Basename;
use File::Find;
use File::Spec::Functions;
use File::Copy;
use Getopt::Long;

# Get arguments
my ($version_flag, $help_flag);
my $prog = basename($0);
my $opts = GetOptions(
  "version" => \$version_flag,
  "help" => \$help_flag,
 );
die $version if $version_flag;
dieWithUsage() if !$opts || $#ARGV != 1;

sub dieWithUsage {
  die <<END;
Usage: $prog ROOTS-LIST DESTINATION
Merge directory trees from right to left (left-most tree takes
precedence). Empty sub-directories and files are removed from the
result.

  --version, -v     show program version
  --help, -h, -?    show this help

  ROOTS-LIST is a path list of source directory trees
  DESTINATION is the directory created for the output
END
}

sub Warn {
  my ($message) = @_;
  warn "$prog: $message\n";
}

my @sourceRoot = split /$Config{path_sep}/, $ARGV[0];
my $destRoot = $ARGV[1];

sub emptyDir {
  my ($dir) = @_;
  opendir DIR, $dir;
  my @contents = ();
  foreach my $name (readdir DIR) {
    push @contents, $name if $name ne ".svn";
  };
  closedir DIR;
  @contents = File::Spec->no_upwards(@contents);
  return $#contents == -1;
}

# Construct file list
my %sources = ();
foreach my $root (reverse @sourceRoot) {
  File::Find::find(
    sub {
      if ($File::Find::name ne $root) {
        my $obj = substr($File::Find::name, length($root));
        # Unflag empty files, directories and their children
        if ((-f && -z) || (-d && emptyDir($_))) {
          delete $sources{$obj};
          if (-d) {
            foreach my $o (keys %sources) {
              delete $sources{$o}
                if substr($o, 0, length($obj)) eq $obj;
            }
          }
        } elsif ($obj ne "") {
          $sources{$obj} = $root;
        }
      }
    },
    $root);
}

# Copy files; work in sorted order so we process create directories in
# the destination tree before writing their contents
foreach my $obj (sort keys %sources) {
  my $source = catfile($sources{$obj}, $obj);
  my $dest = catfile($destRoot, $obj);
  if (-d $source) {
    mkdir $dest;
  } else {
    copy($source, $dest) or Warn("copy of `$source' to `$dest' failed: $!");
  }
}
